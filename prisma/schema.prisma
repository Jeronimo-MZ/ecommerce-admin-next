// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]
  Order      Order[]

  @@unique([name, userId])
}

model Billboard {
  id       String @id @default(uuid())
  label    String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store      @relation(fields: [storeId], references: [id])
  storeId    String
  categories Category[]

  @@index([storeId])
}

model Category {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  billboard   Billboard @relation(fields: [billboardId], references: [id])
  billboardId String
  products    Product[]

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id    String @id @default(uuid())
  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store     @relation(fields: [storeId], references: [id])
  storeId  String
  products Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

model Color {
  id    String @id @default(uuid())
  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store     @relation(fields: [storeId], references: [id])
  storeId  String
  products Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

model Product {
  id         String  @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store    @relation(fields: [storeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  size     Size     @relation(fields: [sizeId], references: [id])
  color    Color    @relation(fields: [colorId], references: [id])

  storeId    String
  categoryId String
  sizeId     String
  colorId    String
  images     ProductImage[]
  orderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model ProductImage {
  id      String  @id @default(uuid())
  url     String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String

  @@index([productId])
}

model Order {
  id      String    @id @default(uuid())
  paidAt  DateTime?
  phone   String?
  address String?

  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  unitPrice Decimal

  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([orderId])
  @@index([productId])
}
